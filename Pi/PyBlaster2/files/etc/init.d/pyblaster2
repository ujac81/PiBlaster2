#! /bin/sh
### BEGIN INIT INFO
# Provides: pyblaster
# Required-Start:    $local_fs $syslog $remote_fs dbus bluetooth udev mpd
# Required-Stop:     $local_fs $syslog $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start pyblaster daemon
### END INIT INFO

# Author: Ulrich Jansen <ulrich.jansen@rwth-aachen.>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="PyBlaster2 daemon"
NAME=pyblaster2
[ -r /etc/default/$NAME ] && . /etc/default/$NAME
DAEMON="$PYBLASTER_PATH/pyblaster2.py"

# check if running headless -- if headless turn off terminal mode
if /opt/vc/bin/tvservice -s | grep 'NTSC\|PAL'; then
  PYBLASTER_TERMINAL_MODE=0
  PYBLASTER_RUN_TMUX=0
fi

# Disable daemon mode if running in tmux mode.
# Tmux mode is for terminal debugging and will launch a set of
# tmux windows on the tty terminal after boot.
# Do not use this setting in productive mode, only for development.
if [ "$PYBLASTER_RUN_TMUX" = 1 ]; then
  PYBLASTER_START_DAEMON=0
fi

# Do not start if should not start PiBlaster
[ "$PYBLASTER_START_DAEMON" = 1 ] || exit 0


if [ "$PYBLASTER_TERMINAL_MODE" = 1 -o "$PYBLASTER_AUTO_RESPAWN" = 1 ]; then
  setterm -blank 0
  DAEMON_ARGS="-f -c ${PYBLASTER_CONF}"
  [ "$PYBLASTER_TERMINAL_MODE" = 0 ] && \
    DAEMON_ARGS="${DAEMON_ARGS} -q"
else
  DAEMON_ARGS="-d -f -c ${PYBLASTER_CONF}"
fi


PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME


# Exit if the package is not installed
[ -x "$DAEMON" ] || \
{
  echo "Not daemonizing PyBlaster -- leaving init script."
  exit 0
}

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
  $PYBLASTER_PATH/pyblaster2-util.py --init


  if [ "$PYBLASTER_AUTO_RESPAWN" = 1 ]; then

    echo 1 > /tmp/pyblaster_respawn
    do_poweroff=0

    (while [ "`cat /tmp/pyblaster_respawn`" = 1 ]; do

      $DAEMON $DAEMON_ARGS || \
      {
        exit_code=$?
        $PYBLASTER_PATH/pyblaster2-util.py --error
        [ $exit_code -eq 10 ] && \
        {
          echo 0 > /tmp/pyblaster_respawn
          do_poweroff=1
          break
        }
        [ "$PYBLASTER_TERMINAL_MODE" = 1 ] && \
        {
          echo
          echo "!!!!! PyBlaster died !!!!!"
          echo "Restarting in 10 secs, do 'service pyblaster stop' to prevent respawn."
        }
        sleep $PYBLASTER_AUTO_RESPAWN_TIMEOUT
      }
      sleep 1
    done
    rm /tmp/pyblaster_respawn
    [ $do_poweroff -eq 1 ] && \
    {
      $PYBLASTER_PATH/pyblaster2-util.py --shutdown
      /sbin/poweroff
    })&

    echo "Piblaster2 daemon respawn loop started."
    return 0
  else

    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
      || return 1
    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
      $DAEMON_ARGS \
      || return 2
  fi
}

#
# Function that stops the daemon/service
#
do_stop()
{
  echo 0 > /tmp/pyblaster_respawn

  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  rm -f $PIDFILE
  return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
  #
  # If the daemon can reload its configuration without
  # restarting (for example, when it is sent a SIGHUP),
  # then implement that here.
  #
  start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
  return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
  ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
  ;;
  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
  #reload|force-reload)
  #
  # If do_reload() is not implemented then leave this commented out
  # and leave 'force-reload' as an alias for 'restart'.
  #
  #log_daemon_msg "Reloading $DESC" "$NAME"
  #do_reload
  #log_end_msg $?
  #;;
  restart|force-reload)
  #
  # If the "reload" option is implemented then remove the
  # 'force-reload' alias
  #
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
    # Failed to stop
    log_end_msg 1
    ;;
  esac
  ;;
  *)
  #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
  echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
  exit 3
  ;;
esac

